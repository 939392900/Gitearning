<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--    把数据库的配置信息，写在一个单独的文件中，编译修改数据库的配置内容
            spring知道jdbc.properties文件的位置
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--声明数据源DateSource 作用是连接数据库-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init"
          destroy-method="close">
        <!--    set注入给DruidDataSource提供链连接数据库的信息-->
        <!--        setUrl()-->
        <!--        使用属性配置文件的数据语法 ${key}-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.max}"/>
    </bean>
    <!--声明的是mybatis中提供的SqlSessionFactoryBean类,这个类的内部创建SqlSessionFactory的-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        set注入,把数据库连接池赋给DataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--        mybatis主配置文件的位置
                    configLocation属性是resource类型 读取配置文件的
                    它的赋值使用value 指定文件路径 classpath：表示文件位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>
    <!--创建dao对象 使用SqlSessionFactory的getMapper(StudentDao.class)
        MapperScannerConfigurer在内部调用getMapper()生成每个dao接口的代理
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--        指定包名，包名是dao接口所在的包名
                    MapperScannerConfigurer会扫描这个包中的所有接口 把每个接口都执行一次getMapper方法
                    得到每个接口的dao对象 创建好的dao对象放在spring容器中 dao对象的默认名称是 接口名首字母小写
        -->
        <property name="basePackage" value="com.ywc.dao"/>
    </bean>

    <!--    声明service-->
    <bean id="buyGoodsService" class="com.ywc.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>

    </bean>

    <!--    声明式事务处理，和源代码完全分离-->
    <!--    1.声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--    2.声明业务方法的事务属性（隔离级别，传播形为，超时时间）
            id：自定义名称 表示<tx:advice> 和 </tx:advice>之间的配置内容
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <!--      tx:attributes 表示配置事务属性
                  <tx:method name=""/> 表示给具体的方法配置事务属性 method可以有多个 分别给不同的方法设置事务的属性
                  name：方法名称 1. 完整的方法名称，不带包和类 2. 可以使用通配符，*表示任意字符
                  propagation 传播形为，枚举值
                  isolation 隔离级别
                  rollback-for 指定的异常类名 全限定类名 发生异常一定回滚
         -->
        <tx:attributes>
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="com.ywc.excep.NotEnoughException,java.lang.NullPointerException"/>
            <!--使用通配符 指定很多的方法 举例  add* 表示以add开头的方法-->

        </tx:attributes>
    </tx:advice>
    <!--    配置aop-->
    <aop:config>
        <!--        配置切入点表达式：指定哪些包中的类，要使用事务-->
        <!--        id 切入点表达式名称 唯一值  expression  切入点表达式 指定哪些类使用事务
                aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--        配置增强器：关联advice和pointcut
                    advice-ref:通知，上面tx:advice的配置
                    pointcut-ref:切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>